# -*- coding: utf-8 -*-
"""stock_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ImuDg6ple1ToU3JefW4Z5YHXsZ6z2-bE
"""

import numpy as np
import pandas as pd 
import seaborn as sns 
from matplotlib import pyplot as plt

data = pd.read_csv("/content/Quote-Equity-TATAMOTORS-EQ-29-11-2020-to-29-11-2021.csv")

data.head()

data.describe(include = 'all').T

data.shape

data.dtypes

data['Date '] = pd.to_datetime(data['Date '])

data.dtypes

data['series '].value_counts()

data.isnull().sum()

fig,(ax1,ax2,ax3)= plt.subplots(ncols=  3,figsize = (18,5))
s = sns.lineplot(ax = ax1,x = data['Date '],y = data['OPEN '])
s = sns.lineplot(ax = ax2,x = data['Date '],y = data['close '],color ='red')
s = sns.lineplot(ax = ax3,x = data['Date '],y = data['HIGH '],color = "yellow")
plt.suptitle(t = 'open vs close vs high')
plt.show()

fig,(ax1,ax2,ax3)= plt.subplots(ncols=  3,figsize = (18,5))
s = sns.scatterplot(ax = ax1,x = data['Date '],y = data['OPEN '])
s = sns.scatterplot(ax = ax2,x = data['Date '],y = data['close '],color ='red')
s = sns.scatterplot(ax = ax3,x = data['Date '],y = data['HIGH '],color = "yellow")
plt.suptitle(t = 'open vs close vs high')
plt.show()

fig,(ax1,ax2,ax3)= plt.subplots(ncols=  3,figsize = (18,5))
s = sns.violinplot(ax = ax1,x = data['Date '],y = data['OPEN '])
s = sns.violinplot(ax = ax2,x = data['Date '],y = data['close '],color ='red')
s = sns.violinplot(ax = ax3,x = data['Date '],y = data['HIGH '],color = "yellow")
plt.suptitle(t = 'open vs close vs high')
plt.show()

fig,(ax1,ax2,ax3)= plt.subplots(ncols=  3,figsize = (18,5))
s = sns.lineplot(ax = ax1,x = data['Date '],y = data['52W H '])
s = sns.lineplot(ax = ax2,x = data['Date '],y = data['52W L '],color ='red')
s = sns.lineplot(ax = ax3,x = data['Date '],y = data['VOLUME '],color = "yellow")
plt.suptitle(t = '52WH  vs 52WL vs VOLUME')
plt.show()

data.columns.values

sns.pairplot(data = data)
plt.show()

correlation = data.corr()

sns.heatmap(data = correlation,annot = True,cmap = "Blues")
plt.show()

data.head()

X = data.drop(columns = ['Date ', 'series ', 'OPEN ', 'VALUE '],axis = 1)

Y = data['OPEN ']

print(X)

print(Y)

from sklearn.model_selection import train_test_split

X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size = 0.1,random_state=1)

print(X.shape,X_train.shape,X_test.shape)

from sklearn.preprocessing import StandardScaler

encoder = StandardScaler()

train_transform = encoder.fit_transform(X_train)

test_transform = encoder.transform(X_test)

print(train_transform)

from sklearn.linear_model import LinearRegression

model = LinearRegression()

model.fit(X_train,Y_train)

train_predict = model.predict(train_transform)

test_predict = model.predict(test_transform)

from sklearn import metrics

metrics.r2_score(Y_train,train_predict)

metrics.mean_absolute_error(Y_train,train_predict)

plt.scatter(train_predict,Y_train)

